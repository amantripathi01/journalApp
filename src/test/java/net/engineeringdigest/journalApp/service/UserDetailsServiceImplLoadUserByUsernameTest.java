// ********RoostGPT********
/*
Test generated by RoostGPT for test javaAstParserTesting using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=loadUserByUsername_493f49ce26
ROOST_METHOD_SIG_HASH=loadUserByUsername_a564afb534
"""
Scenario 1: When a valid username is used
Details:
  TestName: loadUserByUsernameWithValidUsername
  Description: This test is meant to check if the method successfully returns a UserDetails object when a valid username is provided.
  Execution:
    Arrange: Mock the UserRepository to return a User object when findByUserName is called with the valid username.
    Act: Call loadUserByUsername with the valid username.
    Assert: Verify that the returned UserDetails object matches the User object returned by the UserRepository.
  Validation:
    The assertion verifies that the method correctly transforms the User object into a UserDetails object. This test is important to ensure that the method is capable of retrieving and correctly formatting user data.
Scenario 2: When an invalid username is used
Details:
  TestName: loadUserByUsernameWithInvalidUsername
  Description: This test is meant to check if the method throws a UsernameNotFoundException when an invalid username is provided.
  Execution:
    Arrange: Mock the UserRepository to return null when findByUserName is called with the invalid username.
    Act: Call loadUserByUsername with the invalid username.
    Assert: Verify that a UsernameNotFoundException is thrown.
  Validation:
    The assertion verifies that the method correctly handles a situation where the username does not exist in the UserRepository. This test is important to ensure that the method is capable of handling error cases.
Scenario 3: When a null username is used
Details:
  TestName: loadUserByUsernameWithNullUsername
  Description: This test is meant to check if the method throws a UsernameNotFoundException when a null username is provided.
  Execution:
    Arrange: No arrangement is needed for this test.
    Act: Call loadUserByUsername with a null username.
    Assert: Verify that a UsernameNotFoundException is thrown.
  Validation:
    The assertion verifies that the method correctly handles a situation where the username is null. This test is important to ensure that the method is capable of handling edge cases.
"""
*/
// ********RoostGPT********
package net.engineeringdigest.journalApp.service;

import net.engineeringdigest.journalApp.entity.User;
import net.engineeringdigest.journalApp.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.junit.jupiter.api.*;

@Tag("net.engineeringdigest.journalApp.repository")
@Tag("net.engineeringdigest.journalApp.repository.findByUserName")
@Tag("net.engineeringdigest.journalApp.service")
@Tag("net.engineeringdigest.journalApp.service.loadUserByUsername")
public class UserDetailsServiceImplLoadUserByUsernameTest {

	@Mock
	private UserRepository userRepository;

	@InjectMocks
	UserDetailsServiceImpl userDetailsService;

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void loadUserByUsernameWithValidUsername() {
		User user = new User();
		user.setUserName("validUsername");
		user.setPassword("password");
		user.setRoles(Arrays.asList("ROLE_USER"));
		when(userRepository.findByUserName("validUsername")).thenReturn(user);
		UserDetails userDetails = userDetailsService.loadUserByUsername("validUsername");
		assertEquals(user.getUserName(), userDetails.getUsername());
		verify(userRepository, times(1)).findByUserName("validUsername");
	}

	@Test
    public void loadUserByUsernameWithInvalidUsername() {
        when(userRepository.findByUserName("invalidUsername")).thenReturn(null);
        assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserByUsername("invalidUsername"));
        verify(userRepository, times(1)).findByUserName("invalidUsername");
    }

	@Test
	public void loadUserByUsernameWithNullUsername() {
		assertThrows(UsernameNotFoundException.class, () -> userDetailsService.loadUserByUsername(null));
		verify(userRepository, times(1)).findByUserName(null);
	}

}