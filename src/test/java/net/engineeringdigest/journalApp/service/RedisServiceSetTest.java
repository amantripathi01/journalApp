// ********RoostGPT********
/*
Test generated by RoostGPT for test javaAstParserTesting using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=set_771ae45e96
ROOST_METHOD_SIG_HASH=set_4cbad3becf
"""
  Scenario 1: Valid input parameters
  Details:
    TestName: testSetWithValidParameters
    Description: This test is meant to check the operation of the 'set' method when provided with valid key, object and ttl.
  Execution:
    Arrange: Mock the 'redisTemplate' and 'ObjectMapper' classes. Set up a valid key, object and ttl values.
    Act: Invoke the 'set' method with the arranged parameters.
    Assert: Verify 'redisTemplate.opsForValue().set' is called with the correct parameters.
  Validation:
    This test verifies that the method correctly serializes the object and stores it in Redis with the provided key and ttl. This is crucial for the correct functioning of caching mechanism in the application.
  Scenario 2: Exception during object serialization
  Details:
    TestName: testSetWithSerializationException
    Description: This test is meant to check the 'set' method's behavior when an exception occurs during the object serialization.
  Execution:
    Arrange: Mock the 'redisTemplate' and 'ObjectMapper' classes. Set up a valid key, object and ttl values. Make 'objectMapper.writeValueAsString' throw an exception.
    Act: Invoke the 'set' method with the arranged parameters.
    Assert: Verify that 'log.error' is called with the correct parameters.
  Validation:
    This test verifies that the method correctly handles exceptions during object serialization and logs the error. This is important to ensure that the application can recover gracefully from errors and provide useful debugging information.
  Scenario 3: Null key parameter
  Details:
    TestName: testSetWithNullKey
    Description: This test is meant to check the operation of the 'set' method when provided with a null key.
  Execution:
    Arrange: Mock the 'redisTemplate' and 'ObjectMapper' classes. Set up a null key, a valid object and ttl values.
    Act: Invoke the 'set' method with the arranged parameters.
    Assert: Verify 'redisTemplate.opsForValue().set' is not called.
  Validation:
    This test verifies that the method does not attempt to store a value in Redis when the key is null. This is important to prevent null pointer exceptions and ensure data integrity.
  Scenario 4: Null object parameter
  Details:
    TestName: testSetWithNullObject
    Description: This test is meant to check the operation of the 'set' method when provided with a null object.
  Execution:
    Arrange: Mock the 'redisTemplate' and 'ObjectMapper' classes. Set up a valid key, a null object and ttl values.
    Act: Invoke the 'set' method with the arranged parameters.
    Assert: Verify 'redisTemplate.opsForValue().set' is not called.
  Validation:
    This test verifies that the method does not attempt to store a null value in Redis. This is important to prevent null pointer exceptions and ensure data integrity.
"""
*/
// ********RoostGPT********
package net.engineeringdigest.journalApp.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import lombok.extern.slf4j.Slf4j;
import net.engineeringdigest.journalApp.api.response.WeatherResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.junit.jupiter.api.*;

@Tag("net.engineeringdigest.journalApp.service")
@Tag("net.engineeringdigest.journalApp.service.set")
@ExtendWith(MockitoExtension.class)
public class RedisServiceSetTest {

	@InjectMocks
	private RedisService redisService;

	@Mock
	private RedisTemplate<String, String> redisTemplate;

	@Mock
	private ValueOperations<String, String> valueOperations;

	@Test
	public void testSetWithValidParameters() throws Exception {
		// Arrange
		String key = "testKey";
		String value = "testValue";
		Long ttl = 60L;
		ObjectMapper objectMapper = new ObjectMapper();
		String jsonValue = objectMapper.writeValueAsString(value);
		when(redisTemplate.opsForValue()).thenReturn(valueOperations);

		// Act
		redisService.set(key, value, ttl);

		// Assert
		verify(redisTemplate).opsForValue();
		verify(valueOperations).set(key, jsonValue, ttl, TimeUnit.SECONDS);
	}

	@Test
	public void testSetWithSerializationException() throws Exception {
		// Arrange
		String key = "testKey";
		String value = "testValue";
		Long ttl = 60L;
		when(redisTemplate.opsForValue()).thenReturn(valueOperations);
		doThrow(new RuntimeException()).when(valueOperations).set(anyString(), anyString(), anyLong(), any());

		// Act
		redisService.set(key, value, ttl);

		// Assert
		verify(redisTemplate).opsForValue();
		verify(valueOperations).set(key, value, ttl, TimeUnit.SECONDS);
	}

	@Test
	public void testSetWithNullKey() throws Exception {
		// Arrange
		String key = null;
		String value = "testValue";
		Long ttl = 60L;

		// Act
		redisService.set(key, value, ttl);

		// Assert
		verify(redisTemplate, never()).opsForValue();
	}

	@Test
	public void testSetWithNullObject() throws Exception {
		// Arrange
		String key = "testKey";
		String value = null;
		Long ttl = 60L;

		// Act
		redisService.set(key, value, ttl);

		// Assert
		verify(redisTemplate, never()).opsForValue();
	}

}