// ********RoostGPT********
/*
Test generated by RoostGPT for test javaAstParserTesting using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=extractExpiration_ee60ddd167
ROOST_METHOD_SIG_HASH=extractExpiration_62d7cccbb9
"""
Scenario 1: Valid Token Test
Details:
  TestName: validTokenTest
  Description: This test is meant to check if the method correctly extracts the expiration date from a valid token.
Execution:
  Arrange: Create a valid token that contains an expiration date.
  Act: Invoke the extractExpiration method with the valid token.
  Assert: Use JUnit assertions to compare the actual extracted date against the expected date.
Validation:
  The assertion verifies that the method correctly extracts the expiration date from a valid token. This test is significant in ensuring the correct functionality of the method when dealing with valid tokens.
Scenario 2: Invalid Token Test
Details:
  TestName: invalidTokenTest
  Description: This test is meant to check how the method handles an invalid token.
Execution:
  Arrange: Create an invalid token that does not contain an expiration date.
  Act: Invoke the extractExpiration method with the invalid token.
  Assert: Use JUnit assertions to expect an exception to be thrown.
Validation:
  The assertion verifies that the method throws an exception when an invalid token is passed. This test is important for ensuring the method correctly handles invalid tokens.
Scenario 3: Null Token Test
Details:
  TestName: nullTokenTest
  Description: This test is meant to check how the method handles a null token.
Execution:
  Arrange: No arrangement needed as we are passing null.
  Act: Invoke the extractExpiration method with null token.
  Assert: Use JUnit assertions to expect a NullPointerException to be thrown.
Validation:
  The assertion verifies that the method throws a NullPointerException when a null token is passed. This test is significant for ensuring the method correctly handles null values.
Scenario 4: Expired Token Test
Details:
  TestName: expiredTokenTest
  Description: This test is meant to check how the method handles an expired token.
Execution:
  Arrange: Create an expired token.
  Act: Invoke the extractExpiration method with the expired token.
  Assert: Use JUnit assertions to compare the actual extracted date against the expected date.
Validation:
  The assertion verifies that the method correctly extracts the expiration date even from an expired token. This test is significant for ensuring the method correctly handles expired tokens.
"""
*/
// ********RoostGPT********
package net.engineeringdigest.journalApp.utilis;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Assertions;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Calendar;
import org.springframework.stereotype.Component;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import javax.crypto.SecretKey;
import org.junit.jupiter.api.*;

@Tag("net.engineeringdigest.journalApp.utilis")
@Tag("net.engineeringdigest.journalApp.utilis.extractExpiration")
@Tag("net.engineeringdigest.journalApp.utilis.extractAllClaims")
public class JwtUtilExtractExpirationTest {

	@InjectMocks
	JwtUtil jwtUtil;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void validTokenTest() {
		String token = "valid.token";
		Date date = new Date();
		Map<String, Object> claims = new HashMap<>();
		claims.put("exp", date);
		Mockito.when(jwtUtil.extractAllClaims(token)).thenReturn(claims);
		Assertions.assertEquals(date, jwtUtil.extractExpiration(token));
	}

	@Test
	public void invalidTokenTest() {
		String token = "invalid.token";
		Mockito.when(jwtUtil.extractAllClaims(token)).thenThrow(RuntimeException.class);
		Assertions.assertThrows(RuntimeException.class, () -> jwtUtil.extractExpiration(token));
	}

	@Test
	public void nullTokenTest() {
		String token = null;
		Assertions.assertThrows(NullPointerException.class, () -> jwtUtil.extractExpiration(token));
	}

	@Test
	public void expiredTokenTest() {
		String token = "expired.token";
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, -1); // set date to yesterday
		Date date = calendar.getTime();
		Map<String, Object> claims = new HashMap<>();
		claims.put("exp", date);
		Mockito.when(jwtUtil.extractAllClaims(token)).thenReturn(claims);
		Assertions.assertEquals(date, jwtUtil.extractExpiration(token));
	}

}